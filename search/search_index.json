{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"aboutme/","title":"About me","text":"<p>Hi \ud83d\udc4b\ud83c\udffb, I'm Alex. A software developer, engineer and tech enthusiast from the Netherlands.</p> <p>I was born as in the beginning of 1989. I was born with hereditary ocular albinism, which makes me visually impaired. However I am a curious person and ever since I was a child I wanted to learn about everything and anything. I started my computing journey at the age of 4 with an Olivetti PC1. It came with MS-DOS on floppy and it didn't even have internal storage.</p> <p>A couple of years later my parents bought a beige 386 with Windows 3.11. This ignited my curiosity and the next steps in my computing journey. Having internal storage was great and I soon started exploring Windows. Games were my primary passion, but even back than I knew I wanted to be a software developer.</p> <p>At the age of 9 my parents again updated our family computer to a Cyrix 200Mhz and 32MB RAM. Now with Windows 98 and a 28k modem. I soon discovered the internet and that really ignited my passion for computers. At this time I also discovered how to create websites and I soon started pouring hours into hand crafting HTML in Windows Notepad.</p> <p>In secondary school we also got broadband at home. And there was even more exposure to computing in general. At this time I also started out with designer tools such as Macromedia Flash and Adobe Photoshop. However after secondary school I went to Avans University of Applied Sciences and got my bachelors degree in IT. Even after all those years since, I still wanted to be a software engineer.</p> <p>Today I still really enjoy building software. I love the freedom and empowerment it provides me. I also spent a lot of time setting up and maintaining my own homelab. Finally I consider myself an experienced Home Assistant enthusiast.</p> <p>Thank you for reading this and being awesome!</p>"},{"location":"aboutme/reddit_awards/","title":"Reddit Awards","text":"<p>I've collected my Reddit awards and gilded posts here.</p> Subreddit Post Award /r/homeassistant alex3305 replied in Trouble with indentation using service templates /r/peloton Dear organizers, please keep cycling on TV accessible for all /r/plex alex3305 replied in LTT Compares Plex and Jellyfin /r/homeassistant alex3305 replied in Police strobe light effect: how to alternate light colors in smart bulb using script? /r/plex alex3305 replied in New BETA PMS Version Available - 1.29.0.6140-838350c57"},{"location":"homeassistant/","title":"Home Assistant","text":"<p>I am an Home Assistant user since 2019 and since than I try to document my Home Assistant journey as much as possible.</p>"},{"location":"homeassistant/gitignore/","title":".gitignore","text":"<p>These are my personal <code>.gitignore</code> fules.</p>"},{"location":"homeassistant/gitignore/#keep-all-yaml-files","title":"Keep all yaml files","text":"<p>This rule keeps all <code>yaml</code> files and directories that we chose to keep.</p> <pre><code># Home Assistant yaml's\n!*.yaml\n</code></pre>"},{"location":"homeassistant/gitignore/#exclude-home-assistant-internals","title":"Exclude Home Assistant internals","text":"<p>These files are managed by Home Assistant and/or should be included in backups.</p> <pre><code># Home Assistant directory exclusions\n!.managed-by-home-assistant\n!**/.managed-by-home-assistant\n\n# Exclude Home Assistant internals\nblueprints/\nimage/\n.HA_VERSION\n.cloud\n.shopping_list.json\n.storage\nip_bans.yaml\nknown_devices.yaml\n</code></pre>"},{"location":"homeassistant/gitignore/#exclude-log-files","title":"Exclude log files","text":"<p>I don't want any log files in version control.</p> <pre><code># Exclude log files\n*.log\n*.log*\n</code></pre>"},{"location":"homeassistant/gitignore/#exclude-secrets","title":"Exclude secrets","text":"<p>I manage my secrets through Bitwarden. And these are also included in the backups.</p> <pre><code># Exclude secrets\n.google.token\n.google_assistant_service_account.json\nesphome/secrets.yaml\ngoogle_calendars.yaml\nsecrets.yaml\n</code></pre>"},{"location":"homeassistant/gitignore/#hacs","title":"HACS","text":"<p>HACS manages itself.</p> <pre><code># HACS\n!**/.managed-by-hacs\n!.managed-by-hacs\ncustom_components/**\nthemes/**\nwww/community/**\n</code></pre>"},{"location":"homeassistant/gitignore/#ui-generated-files","title":"UI generated files","text":"<p>These files are generated from UI and should be included in backup.</p> <pre><code># Home Assistant UI generated files\nautomations.yaml\nscripts.yaml\nscenes.yaml\n</code></pre>"},{"location":"homeassistant/gitignore/#editors","title":"Editors","text":"<p>Exclude some editor configuration.</p> <pre><code>.idea/\n*.iml\n*.swp\n.vscode/\n</code></pre>"},{"location":"homeassistant/hacs/","title":"HACS","text":"<p>HACS (Home Assistant Community Store) is a powerful integration that you can utilize to install custom and unsupported integrations, themes and UI plugins.</p>"},{"location":"homeassistant/hacs/#installation","title":"Installation","text":"<p>More information regarding installation of HACS can be found on the Installation page of the HACS documentation.</p> <p>HACS and Git</p> <p>If you want to use Git pull with HACS, please set up your Git repository (like below) first before installing HACS. You will make your life significantly easier for yourself!</p>"},{"location":"homeassistant/hacs/#comining-hacs-and-git","title":"Comining HACS and Git","text":"<p>HACS can get a bit tricky when you are also using the Git (with the Git pull add-on), like I do. I was facing merge issues and accidental deletions when pulling changes from Git. Over time I finetuned my set up so I can have the best of both worlds.</p>"},{"location":"homeassistant/hacs/#gitignore","title":"<code>.gitignore</code>","text":"<p>First of all we need to add a couple of lines of code to our <code>.gitignore</code> file located in the root of our Git repository:</p> <pre><code># HACS .gitignore\n!**/.managed-by-hacs\n!.managed-by-hacs\n</code></pre> <p>Since empty directories are never included in a Git commit, we are going to create these additional rules. Both rules explictly include <code>.managed-by-hacs</code> files within our Git repository. Ensuring that we are not going to delete them when committing to Git.</p>"},{"location":"homeassistant/hacs/#directories","title":"Directories","text":"<p>Since HACS uses several directories in our Git configuration for it's data, we are going to add several directories for HACS. I listed a partial view of my file tree below.</p> <pre><code>.\n\u251c\u2500\u2500 appdaemon\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 apps\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 .managed-by-hacs\n\u251c\u2500\u2500 configuration.yaml\n\u251c\u2500\u2500 custom_components\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hacs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 .managed-by-hacs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 .managed-by-hacs\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 python_scripts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 .managed-by-hacs\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 themes\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 .managed-by-hacs\n\u2514\u2500\u2500 www\n    \u2514\u2500\u2500 community\n     \u00a0\u00a0 \u2514\u2500\u2500 .managed-by-hacs\n</code></pre> <p>As you can see I added several directories and added <code>.managed-by-hacs</code> placeholder files in them. This ensures that these otherwise empty direcotires are committed into Git. </p> <p>After adding these directories and placeholder files, you can commit these changes to Git. When you have verified your changes in your Home Assistant install, you can now continue installing HACS.</p> <p>Note</p> <p><code>appdaemon</code> and <code>python_scripts</code> are optional and not enabled by default. They are not required if you don't use them!!</p>"},{"location":"homeassistant/hacs/#configurationyaml","title":"<code>configuration.yaml</code>","text":"<p>Although enabling HACS is done through an UI integration, you will need to set up <code>configuration.yaml</code> for themes:</p> <pre><code>frontend:\nthemes: !include_dir_merge_named themes\n</code></pre> <p>You will, possibly, also need to set up your <code>configuration.yaml</code> for your <code>custom_components</code>, but that's up to the integrations that you install.</p> <p>AppDaemonand Python Scripts</p> <p>Refer to the <code>appdaemon</code> and <code>python_scripts</code> documentation on how to setup those.</p>"},{"location":"homeassistant/addons/bitwarden_secrets/","title":"Bitwarden secrets for Home Assistant","text":"<p>This page outlines my personal set up with Bitwarden secrets for Home Assistant.</p>"},{"location":"homeassistant/addons/bitwarden_secrets/#vaultwarden-installation","title":"Vaultwarden installation","text":"<p>I opted for Vaultwarden, which is an alternative Bitwarden implementation in Rust. Vaultwarden is available as a Home Assistant add-on.</p>"},{"location":"homeassistant/addons/bitwarden_secrets/#home-assistant-organization","title":"Home Assistant organization","text":"<p>We need to do some basic management with Bitwarden to set it up for usage with Home Assistant. This is all done through the Bitwarden web interface.</p>"},{"location":"homeassistant/addons/bitwarden_secrets/#creating-your-personal-user","title":"Creating your personal user","text":"<p>After installing and starting the Bitwarden RS add-on, I recommend that you create your personal user. With this user you can use Bitwarden in general from any device.</p>"},{"location":"homeassistant/addons/bitwarden_secrets/#creating-a-home-assistant-user","title":"Creating a Home Assistant user","text":"<p>We are also going to create a Home Assistant user. This user is only needed by Home Assistant. Since we have a local Bitwarden installation I recommend setting the user id / e-mail address to: <code>homeassistant@localhost.lan</code> indicating this is a local user only.</p> <p>You can use the Bitwarden password generator to generate a secure password for this user.</p>"},{"location":"homeassistant/addons/bitwarden_secrets/#disable-new-registrations","title":"Disable new registrations","text":"<p>Optional</p> <p>This step is optional and not required.</p> <p>When you have Bitwarden exposed to the internet, I recommend disabling new user registration after you have created all of your users. This will keep unwelcome guests out of our local install.</p> <p>You can do this by browsing to the Bitwarden RS suffixed by the <code>/admin/</code> path. So for instance: 'http://homeassistant.lan:7878/admin/'. To access the admin panel you will need your personal access token which can be found in the add-on log.</p> <p>If the admin token isn't visible (anymore) in the Bitwarden RS log you can also retrieve it through Docker and SSH with the following command:</p> <pre><code>docker exec -it addon_a0d7b954_bitwarden cat /data/config.json | jq -r '.admin_token'\n</code></pre> <p>This will print your admin token.</p>"},{"location":"homeassistant/addons/bitwarden_secrets/#creating-a-home-assistant-organization-entity","title":"Creating a Home Assistant organization entity","text":"<p>Finally we are going to create a Home Assistant organization in which we can easily manage our Home Assistant secrets. </p> <p>First we are going to go to Settings \u27a1 Organizations and click New Organization. We set the Organization Name to Home Assistant and you can set anything in Billing email.</p> <p></p> <p>After creating, we go to this newly created organization and click the Manage tab.</p> <p></p> <p>We are going to invite our earlier created Home Assistant user by clicking the \u2795 Invite User tab.</p> <p></p> <p>Info</p> <p>We want this user to have access to all items.</p> <p>Finally we are going to confirm this user to have access to our Home Assistant organization. The user should automatically already have accepted the invite.</p> <p></p> <p>Now we are done with setting up the correct environment for Home Assistant to retrieve our secrets.</p>"},{"location":"homeassistant/addons/bitwarden_secrets/#adding-secrets","title":"Adding secrets","text":"<p>Adding secrets for use in Home Assistant is fairly trivial. You can add items through the web interface or through any of Bitwarden's apps. The only thing you should take care of is adding the item to the correct organization.</p> <p></p>"},{"location":"homeassistant/addons/bitwarden_secrets/#installing-bitwarden-secrets-for-home-assistant","title":"Installing Bitwarden secrets for Home Assistant","text":"<p>Follow these steps to get the add-on installed on your system:</p> <ol> <li>Navigate in your Home Assistant frontend to Supervisor -&gt; Add-on Store</li> <li>Add this new repository by URL (<code>https://github.com/alex3305/home-assistant-addons</code>)</li> <li>Find the \"Bitwarden secrets for Home Assistant\" add-on and click it.</li> <li>Click on the INSTALL button</li> </ol>"},{"location":"homeassistant/addons/bitwarden_secrets/#configuration","title":"Configuration","text":"<p>Just fill in your Home Assistant Bitwarden user, password and organization name into the add-on and you are good to go.</p> <p>You can also enable repeat mode, which will retrieve your secrets at every interval automatically without the need to restart the add-on.</p>"},{"location":"homeassistant/addons/influxdb/","title":"InfluxDB","text":"<p>I use InfluxDB time-series database for storing all my sensor data. This database is easy to configure and there is a Home Assistant add-on available.</p>"},{"location":"homeassistant/addons/influxdb/#add-on-configuration","title":"Add-on configuration","text":"<p>I use the default configuration from the add-on. Within InfluxDB I configure the following:</p> <ul> <li>Database <code>homeassistant</code></li> <li>User <code>homeassistant</code></li> </ul>"},{"location":"homeassistant/addons/influxdb/#home-assistant-configuration","title":"Home Assistant Configuration","text":"<p>After configuring the database and user, I add the InfluxDB integration to Home Assistant by adding it to my <code>configuration.yaml</code>:</p> <p>Info</p> <p>I've excluded some domains and sensors that I won't be querying anyway</p> <pre><code>influxdb:\nhost: a0d7b954-influxdb\nport: 8086\ndatabase: homeassistant\nusername: homeassistant\npassword: !secret influxdb_password\nmax_retries: 3\ndefault_measurement: state\nexclude:\ndomains:\n- zwave\n- automation\nentities:\n- sensor.date\n- sensor.date_time\n- sensor.time\n</code></pre>"},{"location":"homeassistant/addons/influxdb/backup_and_restore/","title":"Backup and Restore","text":"<p>Advanced usage</p> <p>These steps are done from a terminal. You need to have access to SSH and Docker to follow along. The easiest way is to have install the SSH &amp; Web Terminal add-on.</p>"},{"location":"homeassistant/addons/influxdb/backup_and_restore/#backup","title":"Backup","text":""},{"location":"homeassistant/addons/influxdb/backup_and_restore/#backup-from-home-assistant-add-on","title":"Backup from Home Assistant add-on","text":"<pre><code># Enter the container\ndocker exec -it addon_a0d7b954_influxdb bash\n\n# Create a (temporary) backup directory inside the container on \n# a path that's already mounted from Home Assistant\nmkdir -p /share/backup/influxdb/\n\n# Create the backup\ninfluxd backup -database homeassistant -portable /share/backup/influxdb/\n\n# Exit the container\nexit\n\n# (Optional) Set so all users can read the backup data\nsudo chmod a+r /usr/share/hassio/share/backup/influxdb/*\n\n# (Optional) Afterwards remove the backup\nsudo rm -rf /usr/share/hassio/share/backup/influxdb/*\n</code></pre>"},{"location":"homeassistant/addons/influxdb/backup_and_restore/#restore","title":"Restore","text":""},{"location":"homeassistant/addons/influxdb/backup_and_restore/#restore-backup-to-home-assistant-add-on","title":"Restore backup to Home Assistant add-on","text":"<pre><code># Enter the container\ndocker exec -it addon_a0d7b954_influxdb bash\n\n# Restore the backup from a shared directory\ninfluxd restore -portable /share/backup/influxdb/\n</code></pre>"},{"location":"homeassistant/addons/influxdb/backup_and_restore/#restore-backup-to-local-docker-container","title":"Restore backup to Local Docker container","text":"<p>This can be useful for testing and debugging purposes.</p> <pre><code># Create the directory where we'll store our backup\nmkdir -p ~/dump/influxdb\ncd ~/dump/influxdb\n\n# Start by pulling the necessary Docker images\ndocker pull influxdb\ndocker pull chronograf\n\n# Create an InfluxDB network\ndocker network create influxdb\n\n# Start the InfluxDB container with a mounted path where your backup is located\ndocker run -d -p 8086:8086 -v $(pwd):/backup --net influxdb --name influxdb influxdb\n\n# (Optional) Start Chronograf for a web interface\ndocker run -d -p 8888:8888 --net influxdb --name chronograf chronograf --influxdb-url=http://influxdb:8086\n</code></pre> <p>Chronograf provides a nice and easy to use web interface, which can be accessed on <code>http://localhost:8888</code>. After we have started our container(s) we can start restoring our backup.</p> <pre><code># Retrieve our backup from Home Assistant\nscp homeassistant.lan:/usr/share/hassio/share/backup/influxdb/\\* ./\n\n# Enter our InfluxDB Docker container to restore\ndocker exec -it influxdb bash\n\n# And restore our backup!\ninfluxd restore -portable /backup\n</code></pre>"},{"location":"homeassistant/addons/influxdb/downsampling/","title":"Downsampling data","text":"<p>When you store all your sensor data from Home Assistant in InfluxDB, it will continue to grow. And of course storing all Home Assistant data is quite nice, but our data pool can exceed our disk space over time. This can be solved with using both continious queries (CQ) and retention policies (RP).</p> <p>Continious queries are database queries that are ran when new data is added to the database. Thus running almost continuously. We can leverage this functionality to downsample our large term data.</p> <p>We can also use Retention policies on our data to prune older data.</p> <p>Combining both of these features, we can continuously downsample and delete older fine grained data, while retainig the downsampled data.</p>"},{"location":"homeassistant/addons/influxdb/downsampling/#basic-queries","title":"Basic queries","text":"<pre><code>-- Running this query will show the current continuous queries.\nSHOW CONTINUOUS QUERIES\n\n-- Running this query will show the current retention policies on our database.\nSHOW RETENTION POLICIES on \"homeassistant\"\n</code></pre> <p>There should be no current CQ or RP.</p>"},{"location":"homeassistant/addons/influxdb/downsampling/#downsampling-data_1","title":"Downsampling data","text":"<p>I started downsampling data, because my original, inifite autogen RP was filling up with about 1.5GB-2GB/year. This doesn't seem much, but I also tend to keep a couple of weeks of snapshot backups. After I have applied the CQ and RP below, I reduced my InfluxDB storage pool to about 1.3GB.</p>"},{"location":"homeassistant/addons/influxdb/downsampling/#infinite-retention-policy","title":"Infinite retention policy","text":"<p>Let's create an infinite retention policy within InfluxDB on our database.</p> <pre><code>CREATE RETENTION POLICY \"infinite\" ON \"homeassistant\" DURATION INF REPLICATION 1\n</code></pre>"},{"location":"homeassistant/addons/influxdb/downsampling/#downsample-continuous-query","title":"Downsample continuous query","text":"<p>We can downsample our data quite easily by creating a continuous query. I chose to downsample to 1 hour intervals, which is more than sufficiant for me.</p> <pre><code>CREATE CONTINUOUS QUERY \"cq_downsample_1h\" ON \"homeassistant\"\nBEGIN\n  SELECT mean(*) INTO \"homeassistant\".\"infinite\".:MEASUREMENT FROM \"homeassistant\".\"autogen\"./.*/ \n  GROUP BY time(1h), *\n  FILL(previous)\nEND\n</code></pre>"},{"location":"homeassistant/addons/influxdb/downsampling/#backfilling-our-data","title":"Backfilling our data","text":"<p>After creating our RP and CQ, we can than backfill our data into our newly created infinite storage. This is needed, because InfluxDB only applies our new CQ to new data.</p> <p>I have grouped my queries into periods of (about) 10 weeks. Otherwise it is possible to crash InfluxDB, halting our backfill. Below are the queries to backfill a year worth of data. If you have older data, you should add additional queries. </p> <pre><code>SELECT mean(*) INTO \"homeassistant\".\"infinite\".:MEASUREMENT FROM \"homeassistant\".\"autogen\"./.*/ WHERE time &gt; now() - 52w and time &lt; now() - 40w GROUP BY time(1h), * FILL(previous)\nSELECT mean(*) INTO \"homeassistant\".\"infinite\".:MEASUREMENT FROM \"homeassistant\".\"autogen\"./.*/ WHERE time &gt; now() - 41w and time &lt; now() - 30w GROUP BY time(1h), * FILL(previous)\nSELECT mean(*) INTO \"homeassistant\".\"infinite\".:MEASUREMENT FROM \"homeassistant\".\"autogen\"./.*/ WHERE time &gt; now() - 31w and time &lt; now() - 20w GROUP BY time(1h), * FILL(previous)\nSELECT mean(*) INTO \"homeassistant\".\"infinite\".:MEASUREMENT FROM \"homeassistant\".\"autogen\"./.*/ WHERE time &gt; now() - 21w and time &lt; now() - 10w GROUP BY time(1h), * FILL(previous)\nSELECT mean(*) INTO \"homeassistant\".\"infinite\".:MEASUREMENT FROM \"homeassistant\".\"autogen\"./.*/ WHERE time &gt; now() - 11w and time &lt; now() GROUP BY time(1h), * FILL(previous)\n</code></pre>"},{"location":"homeassistant/addons/influxdb/downsampling/#alter-autogen-rp","title":"Alter autogen RP","text":"<p>The final step in this proces is to alter our original, autogen RP to only store 26 weeks, or half a year. You can get away with a shorter RP, and even with a longer RP. For me, 26 weeks seems to be the sweet spot.</p> <pre><code>ALTER RETENTION POLICY \"autogen\" on \"homeassistant\" DURATION 26w SHARD DURATION 1d DEFAULT\n</code></pre>"},{"location":"homeassistant/addons/vscode/","title":"Visual Studio Code for Home Assistant","text":"<p>With Visual Studio Code for Home Assistant it is really easy to edit your YAML configuration on your Home Assistant machine. I prefer to have my configuration within a version control system, but this add-on provides me with the ability to also edit on server. And I can push my changed back into version control.</p>"},{"location":"homeassistant/addons/vscode/#installation","title":"Installation","text":"<p>Installation of this add-on is quite straight forward. The add-on is available as a community add-on within the Home Assistant add-on store.</p>"},{"location":"homeassistant/addons/vscode/#configuration","title":"Configuration","text":"<p>I just used the stock configuration, which worked fine for me.</p>"},{"location":"homeassistant/addons/vscode/#extensions","title":"Extensions","text":"<p>Personally, I really prefer the Subliminal color scheme. Which I have installed as an color theme extension and applied to vscode. I also tend to prefer the IntelliJ IDEA keybindings.</p>"},{"location":"homeassistant/addons/vscode/#git-configuration","title":"Git configuration","text":"<p>Configuring Git was a bit trickier than I've expected. First of all you'll need your Git private key set up on your Home Assistant server. I had it located within my user's <code>.ssh</code> directory. To get the key into this add-on I've just used this command:</p> <pre><code>sudo cp ~/.ssh/* addons/data/a0d7b954_vscode/.ssh/\n</code></pre> <p>After that I had to set up my user and e-mail within the vscode terminal. Something like this:</p> <pre><code>git config --global user.name \"Alex\"\ngit config --global user.email \"alex@example.com\"\n</code></pre> <p>Finally I was able to effectively use Git from within VSCode.</p>"},{"location":"homeassistant/automations/adaptive_lighting/","title":"Adaptive Lighting","text":"<p>I want to have several of my lights adapt to the outside brightness. For Home Assistant Bas Nijholt created the fantastic Adaptive Lighting custom component. However there is one downside, this integration doesn't support brightness based on external sensors. Although there is apparently a workaround. That's why I choose to roll my own using an automation.</p>"},{"location":"homeassistant/automations/adaptive_lighting/#prerequisites","title":"Prerequisites","text":"<ul> <li>An illuminance entity, I use a max average over an hour for a smoother experience</li> <li>The Sun integration (for color temperature)</li> <li>Knowledge of your:</li> <li>Minimum and maximum illuminance</li> <li>Minimum and maximum light brightness</li> <li>Minimum and maximum color temperature (optional)</li> </ul>"},{"location":"homeassistant/automations/adaptive_lighting/#automation","title":"Automation","text":"<p>Note</p> <p>This automation can be pretty resource intensive. Because of the loop and the constant <code>light.turn_on</code> service calls. Normally it shouldn't be a problem. Mostly because of the built-in delays. But you should monitor your resource usage when first trying this out.</p> <pre><code>- id: office_adaptive_lighting\nalias: Office - adaptive lighting\nmode: restart\nvariables:\n# Which illuminance entity to use\nilluminance_entity: 'sensor.light_sensors_illuminance_max_average_1_hour'\n# Whether or not to continue adjust the brightness\ncontinuous_adjustment: true\n\n# Minimal outside illuminance (in lux)\nminimal_illuminance: 5\n# Maximal outside illuminance (in lux)\nmaximal_illuminance: 4000\n\n# Minimal light brightness, will be mapped to minimal illuminance\nminimal_brightness: 10\n# Maximal light brightness, will be mapped to maximal illuminance\nmaximal_brightness: 128\n\n# Whether color temperature adjustment is also enabled\ncolor_temp_adjustment: true\n# Minimal color temp (higher value = warmer)\nminimal_color_temp: 350\n# Maximal color temp (lower value = cooler)\nmaximal_color_temp: 250\ntrigger:\n# Trigger when our light turns on\n- platform: state\nentity_id: light.office\nfrom: 'off'\nto: 'on'\n# Trigger on Home Assistant (re)start\n- platform: homeassistant\nevent: start\ncondition:\n# Always check if the light is on before continuing.\n- condition: state\nentity_id: light.office\nstate: 'on'\naction:\n# Repeat for continuously adjustment\nrepeat:\nsequence:\n- service: light.turn_on\ntarget:\nentity_id: light.office\ndata:\n# The brightness is mapped from the input values to the output values\nbrightness: &gt;-\n{% set illuminance  = states(illuminance_entity) | int(0) %}\n{% set input_start  = minimal_illuminance | int(0) %}\n{% set input_end    = maximal_illuminance | int(0) %}\n{% set output_start = minimal_brightness | int(0) %}\n{% set output_end   = maximal_brightness | int(0) %}\n\n{{ [[(illuminance - input_start) / (input_end - input_start) * (output_end - output_start) + output_start, output_end] | min, output_start] | max }}\n# Add a transition for a smoother experience (optional)\ntransition: \"{{ (iif(repeat.first, 1, 5) | int(0)) }}\"\n- delay:\nseconds: \"{{ (iif(repeat.first, 1, 5) | int(0)) }}\"\n- service: light.turn_on\ntarget:\nentity_id: light.office\ndata:\n# Inspired from: https://community.home-assistant.io/t/template-entity-to-guess-the-outside-colour-temperature/402510\ncolor_temp: &gt;-\n{% if (color_temp_adjustment | default(false)) %}\n{{ [ [ (1000000/(4791.67 - 3290.66/(1 + 0.222 * [ [ 0, state_attr('sun.sun', 'elevation') ] | max, 90 ] | min**0.81)))|int, (maximal_color_temp|int(0)) ] | max, (minimal_color_temp|int(0)) ] | min }}\n{% else %}\n{{ state_attr('light.office', color_temp) }}\n{% endif %}\n# Add a transition for a smoother experience (optional)\ntransition: \"{{ (iif(repeat.first, 1, 3) | int(0)) }}\"\n- wait_for_trigger:\n# Wait for a illuminance change\n- platform: state\nentity_id: sensor.light_sensors_illuminance_max_average_1_hour\n# Wait for the light to turn off\n- platform: state\nentity_id: light.office\nto: 'off'\ntimeout:\nminutes: 15\ncontinue_on_timeout: true\n# Add a delay to lower resource usage\n- delay:\nminutes: 1\nuntil:\nor:\n# Continue until continuous_adjustment = off\n- condition: template\nvalue_template: \"{{ (continuous_adjustment | default(false)) == false }}\"\n# Continue until it is below our minimal illuminance (too dark)\n- condition: template\nvalue_template: \"{{ (states(illuminance_entity) | int(0)) &lt;= (minimal_illuminance | int(0)) }}\"\n# Continue until the light is off\n- condition: state\nentity_id: light.office\nstate: 'off'\n# Continue until the light is unavailable\n- condition: state\nentity_id: light.office\nstate: 'unavailable'\nfor:\nminutes: 1\n</code></pre>"},{"location":"homeassistant/install/","title":"Installation","text":"<p>I have ran several different installation types of Home Assistant over the years. Currently I'm running Home Assistant OS within a VM on unRAID.</p> <p>Official Documentation</p> <p>Also refer to the Home Assistant Installation page for possibly a more complete and up to date reference.</p>"},{"location":"homeassistant/install/#home-assistant-os-vm-unraid","title":"Home Assistant OS (VM, unRAID)","text":"<p>See Home Assistant OS.</p>"},{"location":"homeassistant/install/#home-assistant-supervised","title":"Home Assistant Supervised","text":"<p>See Home Assistant Supervised.</p>"},{"location":"homeassistant/install/haos_vm/","title":"Home Assistant OS","text":"<p>I've used this community post as a starting off point for installation.</p> Enable VM's in unRAID <p>Before installing this you'll need to enable VM's in unRAID.</p>"},{"location":"homeassistant/install/haos_vm/#install-usb-manager-optional-but-recommended","title":"Install USB Manager (optional, but recommended)","text":"<p>You can install the USB manager to easily passthrough individual USB devices to your Home Assistant VM (or other VMs). </p> <ol> <li>Go to Apps</li> <li>Search for 'USB Manager'</li> <li>Install 'USB Manager'</li> </ol>"},{"location":"homeassistant/install/haos_vm/#get-qcow2-image","title":"Get qcow2 image","text":"<ol> <li>Download the latest <code>qcow2.xz</code> image from the Home Assistant OS Release page on GitHub.</li> <li>Extract this <code>xz</code> archive into your unRAID server. I choose the share <code>domains</code></li> </ol>"},{"location":"homeassistant/install/haos_vm/#setup-home-assistant-vm","title":"Setup Home Assistant VM","text":"<ol> <li>Add a VM</li> <li>Choose the number of CPU cores you want to assign to the VM</li> <li>Choose the amount of RAM you want to assign to the VM</li> <li>Primary vDisk location choose Manual and point it to the <code>qcow2</code> file</li> <li>Set Primary vDisk Bus to SATA</li> <li>Click Create</li> </ol>"},{"location":"homeassistant/install/haos_vm/#setup-usb-passthrough","title":"Setup USB passthrough","text":"<p>USB manager required</p> <p>For this step USB manager is required.</p> <p>For each device you want to passthrough:</p> <ol> <li>Click on Device Settings \ud83d\udda5\ufe0f</li> <li>Select the Home Assistant Virtual Machine</li> <li>Enable \"Auto Connect at USB Device Plugin\"</li> <li>Enable \"Auto Connect to VM at VM Start\"</li> <li>Click Done</li> </ol> Conbee II incompatibility <p>For the Conbee II to work properly using the USB Manager on unRAID you'll need to enable \"Connect as Serial Only\". For more information, see also this unRAID forum post, this Home Assistant community post and this Reddit post.</p>"},{"location":"homeassistant/install/haos_vm/#start-vm","title":"Start VM","text":"<p>Finally you can start the VM. USB devices should connect automatically, as configured. You can use VNC to monitor your VM.</p>"},{"location":"homeassistant/install/supervised/","title":"Home Assistant Supervised","text":"Possibly out of date <p>I don't use this installation type anymore, but this documentation is only kept for others / future reference.</p> Strict requirements <p>This installation type has some strict requirements as outlined by ADR-0014.</p>"},{"location":"homeassistant/install/supervised/#debian-install","title":"Debian install","text":"<ol> <li>Download Debian. I chose the non-free firmware repo for maxmimum compatibiliy. This version of Debian contains proprietary kernel modules needed for network connectivity.</li> <li>Put Debian on removable media (eg. thumb drive)</li> <li>Install Debian<ul> <li>I use a Network Install</li> <li>I've not setup the <code>root</code> user</li> <li>I don't setup an X environment</li> <li>I used the complete disk for provisioning</li> </ul> </li> </ol>"},{"location":"homeassistant/install/supervised/#configuration","title":"Configuration","text":""},{"location":"homeassistant/install/supervised/#root-user","title":"Root user","text":"<p>We didn't set up a <code>root</code> user during install. This is fine, since we can simply use <code>sudo</code>, but prevents us from getting into safe mode when \ud83d\udca9 hits the fan. So we set up a password for the <code>root</code> user:</p> <pre><code>sudo su\npasswd\n</code></pre>"},{"location":"homeassistant/install/supervised/#swappiness","title":"Swappiness","text":"<p>I lower the swappiness for a more responsive system:</p> <pre><code>sudo sysctl -w vm.swappiness=5\nsudo echo \"vm.swappiness=5\" &gt;&gt; /etc/sysctl.conf\n</code></pre> <p>This will ensure that less of swap is used. You can test if the setting applied correctly: </p> <pre><code>sysctl vm.swappiness\ncat /etc/sysctl.conf\n</code></pre>"},{"location":"homeassistant/install/supervised/#additional-required-packages","title":"Additional / required packages","text":"<pre><code>sudo apt update\nsudo apt install -y aptitude apparmor bash curl dbus dnsutils \\\ngit htop jq libglib2.0-bin lsb-release ncdu \\\nnmon network-manager socat sshpass \\\nsystemd-journal-remote udisks2 vim wget\n</code></pre> <p>Info</p> <p>These are my favorite packages, mixed in with the required packages.</p>"},{"location":"homeassistant/install/supervised/#docker-installation","title":"Docker installation","text":"<pre><code>sudo -s\ncurl -fsSL get.docker.com | sh\n</code></pre>"},{"location":"homeassistant/install/supervised/#install-home-assistant-os-agent","title":"Install Home Assistant OS Agent","text":"<p>You'll need to download the latest release from GitHub.</p> <pre><code>sudo -s\nsudo dpkg -i os-agent_1.0.0_linux_x86_64.deb\n</code></pre> <p>Note</p> <p>Change the version number to the downloaded version</p> <p>You can test if the installation was successful by running:</p> <pre><code>gdbus introspect --system --dest io.hass.os --object-path /io/hass/os\n</code></pre> <p>This should not return an error. If you get an object introspection with interface etc. OS Agent is working as expected.</p>"},{"location":"homeassistant/install/supervised/#install-home-assistant","title":"Install Home Assistant","text":"<p>Finally we can download and install Home Assistant:</p> <pre><code>wget https://github.com/home-assistant/supervised-installer/releases/latest/download/homeassistant-supervised.deb\napt install ./homeassistant-supervised.deb\n</code></pre>"},{"location":"homeassistant/integrations/proximity/","title":"Proximity","text":"<p>The Proximity integration can be very helpful for certain situations.</p>"},{"location":"homeassistant/integrations/proximity/#near-a-zone","title":"Near a zone","text":"<p>From a question on Reddit to check whether or not a person is near a zone. Or in this case, when he is on a midday walk, we can use the proximity integration.</p> <p>First up we'll add a proximity sensor to our <code>configuration.yaml</code>:</p> <pre><code>proximity:\noffice:\nzone: office\ndevices:\n- device_tracker.alex\ntolerance: 100\nunit_of_measurement: m\n</code></pre> <p>This will add a proximity around the office zone. This we can than use to see whether or not we are near this zone with a template sensor:</p> <pre><code>template:\n- binary_sensor:\n- name: \"Alex in Office\"\nstate: \"{{ (states('proximity.office') | int(0)) &lt; 500 }}\"\n</code></pre> <p>And we can even combine this with the Workday integration:</p> <pre><code>template:\n- binary_sensor:\n- name: \"In Office\"\nstate: &gt;\n{{ ((states('proximity.home') | int(0)) &lt; 1000) and \nis_state('binary.binary_sensor.workday', 'on') }}\n</code></pre> Original answer <p>Reddit Permalink</p>"},{"location":"homelab/hardware/","title":"Hardware","text":""},{"location":"homelab/hardware/#main-infrastructure","title":"Main infrastructure","text":"<p>My main infrastructure is very simple and only consists of 4 devices. </p>"},{"location":"homelab/hardware/#asus-ax86s","title":"ASUS AX86S","text":"<p>This is my main router, which handles my gigabit fiber. It has Wifi 6 with support for 160MHz channel width on 5GHz. I utilize that to have gigabit+ speeds on wifi.</p>"},{"location":"homelab/hardware/#gigabyte-brix-j4105","title":"Gigabyte Brix J4105","text":"<p>I use this very low power machine with 16GB to run unRAID, Home Assistant and a dozen or so Docker services. It is also packed with 2 1TB SSDs for backups and data storage.</p>"},{"location":"homelab/hardware/#qnap-ts-351","title":"QNAP TS-351","text":"<p>This QNAP NAS that I bought very cheap on iBood and filled it with 8GB of RAM. This device only has a meager Intel J1800, but that does the job. It is also a bit of a weird device as it houses 3 3.5\" drive bays and 2 NVMe slots. In addition I also use USB storage. Currently it has over 30TB of internal storage and about 7TB of external storage. My NAS also runs Docker (Container Station) for a dozen or so Docker containers.</p>"},{"location":"homelab/hardware/#raspberry-pi-3b","title":"Raspberry Pi 3B+","text":"<p>I still use my old Home Assistant, a Raspberry Pi 3B+, for my water heater temperature probe.</p>"},{"location":"homelab/qnap/enable_disk_spindown/","title":"Enabling QNAP disk spindown","text":"<p>I like to enable disk spindown within my NAS to save on power consumption. This behaviour should be enabled by default, but in my case it wasn't working correctly. After some time scouring the internet, I found that many users were having the same issues. </p> <p>With some online resources I found a way to truly enable QNAP disk spindown.</p> <p>Note</p> <p>This is advanced usage. Please bear in mind that this modifies your default NAS behaviour.</p>"},{"location":"homelab/qnap/enable_disk_spindown/#requirements","title":"Requirements","text":"<ul> <li>QNAP NAS</li> <li>NVMe SSD installed into your NAS</li> </ul>"},{"location":"homelab/qnap/enable_disk_spindown/#disable-qts-storage","title":"Disable QTS storage","text":"<p>QTS creates a RAID1 array across all your drives inside of your NAS for it's OS storage. Initially I thought this was a clever idea. But it can (and will) prevent your drives from spindown. Even if you have a NVMe SSD installed. Since SSD's rarely die from wear in normal use, I decided to disable this RAID1 array most of the time.</p> <p>However we rebuild this array once a day to keep our data synced to all our drives. Just in case a drive failure occurs. More on that later.</p> <p>Note</p> <p>I've added this script to my <code>/shares/scripts/</code> directory, but it can also be placed inside of your <code>/root/</code> (or <code>~</code>) directory.</p>"},{"location":"homelab/qnap/enable_disk_spindown/#finding-out-which-drives-to-disable","title":"Finding out which drives to disable","text":"<p>Just run <code>cat /proc/mdstat</code> which would return something like this:</p> <pre><code>Personalities : [linear] [raid0] [raid1] [raid10] [raid6] [raid5] [raid4] [multipath]\n\n...\n\nmd13 : active raid1 sdd[3] sdb[2] sda[1] nvme0n1p4[0]\n      458880 blocks super 1.0 [32/1] [U_______________________________]\n      bitmap: 1/1 pages [4KB], 65536KB chunk\n\nmd9 : active raid1 sdd[3] sdb[2] sda[1] nvme0n1p4[0]\n      530048 blocks super 1.0 [32/1] [U_______________________________]\n      bitmap: 1/1 pages [4KB], 65536KB chunk\n</code></pre> <p>Since I've installed an NVMe drive, I only want to retain that drive for my QTS storage. Remember the other drives, because you will need to edit the scripts below to fit your storage solution.</p>"},{"location":"homelab/qnap/enable_disk_spindown/#disconnecting-the-qts-raid1-array","title":"Disconnecting the QTS RAID1 array","text":"<p>First up we add a script to disconnect our internal QTS RAID1 array.</p> <pre><code>#!/bin/bash\n\nHDDS=\"sda sdb sdd\"\n\nerrquit() {\nSTATUS=1\n_errlog \"$@\"\nexit ${STATUS}\n}\n\necho \"Disconnecting hdd's from /dev/md9 array\"\n\nfor disk in ${HDDS}; do\nif [ ! -e /dev/${disk} ]; then\nerrquit \"Could not find /dev/${disk}\"\nelse\nmdadm /dev/md9 --fail /dev/${disk}1\nfi\ndone\n\necho \"Disconneting hdd's from /dev/md13 array\"\n\nfor disk in ${HDDS}; do\nif [ ! -e /dev/${disk} ]; then\nerrquit \"Could not find /dev/${disk}\"\nelse\nmdadm /dev/md13 --fail /dev/${disk}4\nfi\ndone\n</code></pre> <p>Note</p> <p>You should modify the <code>HDDS</code> parameter to suit your NAS and drive configuration.</p>"},{"location":"homelab/qnap/enable_disk_spindown/#rebuilding-the-qts-raid1-array","title":"Rebuilding the QTS RAID1 array","text":"<p>Second up, we add a script to rebuild our QTS array once a day for data integrity should my NVMe drive fail.</p> <pre><code>#!/bin/bash\n\nHDDS=\"sda sdb sdd\"\n\nerrquit() {\nSTATUS=1\n_errlog \"$@\"\nexit 1\n}\n\necho \"Rebuilding hdd's to /dev/md9 array\"\n\nfor disk in ${HDDS}; do\nif [ ! -e /dev/${disk} ]; then\nerrquit \"Could not find /dev/${disk}\"\nelse\nmdadm /dev/md9 --re-add /dev/${disk}1\nfi\ndone\n\necho \"Rebuilding hdd's to /dev/md13 array\"\n\nfor disk in ${HDDS}; do\nif [ ! -e /dev/${disk} ]; then\nerrquit \"Could not find /dev/${disk}\"\nelse\nmdadm /dev/md13 --re-add /dev/${disk}4\nfi\ndone\n</code></pre>"},{"location":"homelab/qnap/enable_disk_spindown/#disable-swap","title":"Disable swap","text":"<p>Since I've added 8GB of RAM to my NAS, I decided to disable swap memory. Because swap is also shared between (hard)drives. You could also add a swap file on the NVMe storage if you still want swap enabled.</p> <pre><code>echo \"Turning system swap off\"\nswapoff -a\n</code></pre>"},{"location":"homelab/qnap/enable_disk_spindown/#autorun","title":"Autorun","text":"<p>To get this all going, you can edit QTS's autorun file. Editing this file is different on different NAS devices. You can check QNAP's documentation on how to edit this file on your NAS.</p>"},{"location":"homelab/qnap/enable_disk_spindown/#editing-autorun","title":"Editing autorun","text":"<pre><code>mount $(/sbin/hal_app --get_boot_pd port_id=0)6 /tmp/config\nvi /tmp/config/autorun.sh\nchmod +x /tmp/config/autorun.sh\numount /tmp/config\n</code></pre>"},{"location":"homelab/qnap/enable_disk_spindown/#autorun-script","title":"Autorun script","text":"<pre><code>if crontab -l | grep -q 'rebuild_internal_raid'; then\n# Nothing to do; /etc/config/ is on a persistent storage and was already modified\n:\nelse\necho \"15 10 * * * /share/scripts/rebuild_internal_raid.sh\" &gt;&gt; /etc/config/crontab\n    crontab /etc/config/crontab &amp;&amp; /etc/init.d/crond.sh restart\nfi\n\nif crontab -l | grep -q 'disconnect_internal_raid'; then\n# Nothing to do; /etc/config/ is on a persistent storage and was already modified\n:\nelse\necho \"30 10 * * * /share/scripts/disconnect_internal_raid.sh\" &gt;&gt; /etc/config/crontab\n    crontab /etc/config/crontab &amp;&amp; /etc/init.d/crond.sh restart\nfi\n\nexec /share/scripts/disconnect_internal_raid.sh\n\necho \"Turning system swap off\"\nswapoff -a\n</code></pre>"},{"location":"homelab/qnap/enable_disk_spindown/#references","title":"References","text":"<ul> <li>https://www.reddit.com/r/qnap/comments/fhh61n/new_ts328_hdds_not_spinning_down_qnap_say_its/</li> <li>https://forum.qnap.com/viewtopic.php?t=130788</li> <li>https://wiki.qnap.com/wiki/Add_items_to_crontab</li> </ul>"},{"location":"homelab/qnap/mounting_qnap_disks/","title":"Mounting QNAP disks in Debian Linux","text":"<p>I recently migrated to a QNAP NAS from an old DIY NAS for most of my home data. When starting to copy over my first batch of data I worked out that the data transfer was going to take about 12 - 18 hours on my 1GBps home network...</p> <p>This was unacceptable to me, so I tried mounting my new shiny QNAP NAS disk (readily formatted) inside my old DIY NAS to speed up the transfer. After doing this, the transfer was about 6 times faster than copying all data over my network.</p> <p>All in all this was a bit harder than anticipated, so I documented my steps.</p> <p>Note</p> <p>This guide may not work for every RAID setup, but can provide a simple reference.</p>"},{"location":"homelab/qnap/mounting_qnap_disks/#qnap-side","title":"QNAP side","text":"<p>On the QNAP side I had created a Single Volume with a single disk, no RAID whatsoever. On that disk I created a shared folder with a placeholder file that I could recognize for testing the mount.</p> <p>I did not opt for a Storage Pool, because data redundency was not my primary goal. </p>"},{"location":"homelab/qnap/mounting_qnap_disks/#debian-linux-side","title":"Debian Linux side","text":"<p>Within Debian I had to install two packages first.</p> <p>Note</p> <p>All these steps require root (<code>sudo</code>)!</p> <pre><code>apt update\napt install -y mdadm lvm2\n</code></pre> <p>We need both <code>mdadm</code> and <code>lvm2</code> for managing the QNAP resource. After which we can scan for both RAID devices and LVM devices.</p> <pre><code>mdadm --assemble --scan\nlvscan\n</code></pre> <p>The commands above are probably not mandatory, but they seem to get something going. Now we can look at which Volume Groups (VG) are found within the system.</p> <pre><code>vgdisplay\n</code></pre> <p>In my setup, this returned volume group <code>vg289</code>. I also noticed this with the <code>lvscan</code> command, but this is a bit more verbose and human readable. Now that we know the volume group (VG) name, we can activate it.</p> <pre><code>vgchange -a y vg289\n</code></pre> <p>This command will activate the volume group, if all goes well. I re-ran the <code>lvscan</code> command to check if the volume group was correctly activated and to look up the logical volume (LV) I wanted to utilize.</p> <pre><code>lvscan\n  ACTIVE            '/dev/vg289/lv545' [&lt;37.28 GiB] inherit\n  ACTIVE            '/dev/vg289/lv2' [3.59 TiB] inherit\n</code></pre> <p>As you can probably tell, the <code>lv2</code> volume was the one I wanted to use. Since the LV was now active, I can mount it.</p> <pre><code>mkdir -p /mnt/qnap\nmount /dev/vg289/lv2/ /mnt/qnap\n</code></pre> <p>Et voila. This mounted my QNAP locally on my Linux box. </p> <p>Note</p> <p>This guide will also work with Debian derivatives, such as Ubuntu Linux</p>"},{"location":"homelab/qnap/mounting_qnap_disks/#references","title":"References","text":"<ul> <li>https://forum.qnap.com/viewtopic.php?t=93862</li> <li>https://superuser.com/a/666034</li> </ul>"},{"location":"selfhosted/","title":"Self hosted","text":"<p>I try to self host many components of my infrastructure. I mostly use Docker for self hosting, because it is easy to use and repeatable.</p>"},{"location":"selfhosted/adguardhome/adguardhome_sync/","title":"AdGuard Home Sync","text":"<p>In addition to my main AdGuard Home install, I also have deployed a secondary instance of AdGuard Home. This is automatically synced using AdGuard Home Sync.</p>"},{"location":"selfhosted/adguardhome/adguardhome_sync/#compose","title":"Compose","text":"<pre><code>services:\nadguardhome:\nimage: adguard/adguardhome\ncontainer_name: adguardhome\nrestart: always\npull_policy: always\nports:\n- 192.168.1.5:53:53/tcp\n- 192.168.1.5:53:53/udp\n- 3000:3000/tcp\n\nadguardhome-sync:\nimage: ghcr.io/bakito/adguardhome-sync\ncontainer_name: adguardhome-sync\ncommand: run\nrestart: always\npull_policy: always\nports:\n- 3001:8080\nenvironment:\nORIGIN_URL: 'http://192.168.1.4:3000'\n\nREPLICA_URL: 'http://192.168.1.5:3000'\nREPLICA_AUTOSETUP: true\nREPLICA_USERNAME: admin\nREPLICA_PASSWORD: password\n\nCRON: '*/10 * * * *' # run every 10 minutes    \nRUNONSTART: true\n</code></pre>"},{"location":"selfhosted/adguardhome/adguardhome_sync/#notes","title":"Notes","text":"<p>Warning</p> <p>These notes were checked and updated on 2023-04-07.</p>"},{"location":"selfhosted/adguardhome/adguardhome_sync/#adguard-home-sync-webui","title":"AdGuard Home Sync WebUI","text":"<p>AdGuard Home Sync also has a WebUI. Although I have this mapped, this is entirely optional.</p>"},{"location":"selfhosted/adguardhome/adguardhome_sync/#authentication","title":"Authentication","text":""},{"location":"selfhosted/adguardhome/adguardhome_sync/#origin-authentication","title":"Origin authentication","text":"<p>The origin AdGuard Home doesn't have authentication enabled.</p>"},{"location":"selfhosted/adguardhome/adguardhome_sync/#replica-authentication","title":"Replica authentication","text":"<p>I couldn't find an option to disable authentication on the replica and still use auto setup.</p>"},{"location":"selfhosted/adguardhome/adguardhome_sync/#disabled-blocklists","title":"Disabled blocklists","text":"<p>Disabled blocklists were copied and enabled on the replica.</p>"},{"location":"selfhosted/mkdocs_material/custom_landing_page/","title":"Custom landing page","text":"<p>A very simple example on how you can setup your own Mkdocs Material Hero landing page.</p>"},{"location":"selfhosted/mkdocs_material/custom_landing_page/#alternative-home-page","title":"Alternative home page","text":"<p>For this to work we'll need to the following directory structure:</p> <pre><code>.\n\u251c\u2500\u2500 .overrides\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 home.html\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"selfhosted/mkdocs_material/custom_landing_page/#mkdocsyml","title":"<code>mkdocs.yml</code>","text":"<p>You can leave this stock, but for this to work properly the <code>navigation.instant</code> feature needs to be disabled.</p>"},{"location":"selfhosted/mkdocs_material/custom_landing_page/#docsindexmd","title":"<code>docs/index.md</code>","text":"<p>This file needs to have the following content:</p> <pre><code>---\ntitle: Home\ntemplate: home.html\nhide:\n    - navigation\n    - toc\n---\n</code></pre> <p>End with empty line</p> <p>An empty line on the end of the file is required for this to work!</p>"},{"location":"selfhosted/mkdocs_material/custom_landing_page/#overrideshomehtml","title":"<code>.overrides/home.html</code>","text":"<p>This is our referenced <code>home.html</code> override that contains the custom html and styling, like so:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block styles %}\n{{ super() }}\n&lt;style&gt;\n/** Custom CSS goes here **/\n&lt;/style&gt;\n{% endblock %}\n\n{% block content %}\n&lt;!-- You can have custom HTML content here --&gt;\n{% endblock %}\n</code></pre>"},{"location":"selfhosted/mkdocs_material/custom_landing_page/#references","title":"References:","text":"<ul> <li>GitHub - squidfunk/mkdocs-material#1996</li> <li>GitHub - up42/up42-py - docs/theme_override_home</li> <li>Mkdocs - Customizing Your Theme</li> </ul>"}]}